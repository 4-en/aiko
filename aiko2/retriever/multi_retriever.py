from .base_retriever import BaseRetriever
from .retrieval_results import RetrievalResults, QueryResults
from aiko2.core import Conversation, Message

class MultiRetriever(BaseRetriever):
    """
    A retriever that uses multiple retrievers to retrieve information.
    Retrieved information from child retrievers is merged and possibly
    deduplicated and reranked.
    """
    
    def __init__(self, retrievers: list[BaseRetriever] = []):
        """
        Initialize the multi retriever.
        
        Parameters
        ----------
        retrievers : List[BaseRetriever]
            A list of retrievers to use to retrieve information.
        """
        self.retrievers = retrievers
        
    def _merge_results(self, results: list[RetrievalResults]) -> RetrievalResults:
        """
        Merge the results of the individual retrievers.
        
        Parameters
        ----------
        results : List[RetrievalResults]
            A list of retrieval results from individual retrievers.
            
        Returns
        -------
        RetrievalResults
            The merged retrieval results.
        """
        # Merge the results
        merged_results = RetrievalResults()
        query_results = {}
        for result in results:
            for query_result in result.query_results:
                if query_result.query in query_results:
                    query_results[query_result.query].extend(query_result)
                else:
                    query_results[query_result.query] = query_result
        
        # Add the merged query results to the merged results
        # TODO: implement RetrievalResults first before continuing here
        for query_result in query_results.values():
            merged_results.add_query_result(query_result)
        return merged_results
        
    def retrieve(self, conversation: Conversation, queries: list[str]) -> RetrievalResults:
        """
        Retrieve information based on the queries generated by the evaluator.
        
        Parameters
        ----------
        conversation : Conversation
            The conversation to retrieve information for.
        queries : List[str]
            A list of queries to retrieve information.
            
        Returns
        -------
        RetrievalResults
            The retrieval context containing the results of the retrieval operation.
        """
        
        individual_results = []
        for retriever in self.retrievers:
            individual_results.append(retriever.retrieve(conversation, queries))
            
        # Merge the results
        merged_results = self.merge_results(individual_results)
    